#####################################
# Data configuration for hh4b study #
#####################################

# Note: originally copied from here: /afs/cern.ch/work/g/gouskos/public/forLuka/hh4b_ParT.yaml
# Note: this is a test version, with variables tailored to a simple feedforward NN.
# Note: contains several specific sections and conventions for the custom DisCo network.


treename: Events

selection:
    # Define the selection for the training set
    # Note: one can use `&`, `|`, `~` for logical operations on numpy arrays
    # Note: one can use functions from `math`, `np` (numpy), and `awkward` in the expression
    #( (n_ak4>=3)
    #& (n_ak4_btags_M>=2)
    #& (alljets_ht>300)
    #& (passmetfilters == 1)
    #& (passjetvetomap == 1)
    #& (passTrig_HLT_QuadPFJet70_50_40_35_PFBTagParticleNet_2BTagSum0p65 == 1)
    #& (passL1unprescaled_HLT_QuadPFJet70_50_40_35_PFBTagParticleNet_2BTagSum0p65 == 1)
    #& (passTrigObjMatching_HLT_QuadPFJet70_50_40_35_PFBTagParticleNet_2BTagSum0p65 == 1)
    #& (avgbdisc_twoldgbdiscjets > 0.68) )

test_time_selection:
    # Define the selection for the testing set
    #( (n_ak4>=3)
    #& (n_ak4_btags_M>=2)
    #& (alljets_ht>300)
    #& (passmetfilters == 1)
    #& (passjetvetomap == 1)
    #& (passTrig_HLT_QuadPFJet70_50_40_35_PFBTagParticleNet_2BTagSum0p65 == 1)
    #& (passL1unprescaled_HLT_QuadPFJet70_50_40_35_PFBTagParticleNet_2BTagSum0p65 == 1)
    #& (passTrigObjMatching_HLT_QuadPFJet70_50_40_35_PFBTagParticleNet_2BTagSum0p65 == 1)
    #& (avgbdisc_twoldgbdiscjets > 0.68) )

file_magic:
  # Match file names to sample index (?)
  # Note: the full path to the files for training/testing
  #       must be specified on the command-line at runtime
  #       using the '--data-train' and '--data-test' arguments.
  sample:
    HHto4b_mH_100_powheg_pythia8_Run3_.+\.root: 1
    HHto4b_mH_150_powheg_pythia8_Run3_.+\.root: 2

new_variables:
    # Define new variables as a function of existing variables
    # The format is: name: formula
    # Note: one can use functions from `math`, `np` (numpy), and `awkward` in the expression
    isHHto4b_mH_100: sample==1
    isHHto4b_mH_150: sample==2

preprocess:
   ### method: [manual, auto] - whether to use manually specified parameters
   # (for variable standardization)
   method: manual
   ### data_fraction: fraction of events to use when calculating the mean/scale
   # (for the standardization)
   data_fraction: 1

inputs:
   # Define input features to the network

   input_features:
      length: 1
      vars:
         - dHH_H1_regmass
         - dHH_H2_regmass

   decorrelate:
      # define variable to decorrelate output from.
      # note: this only works in combination with the correct model config!
      length: 1
      vars:
        - dHH_H1_regmass

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification,
   ### then `value` is a list of 0-1 labels
   type: simple
   value: [isHHto4b_mH_100, isHHto4b_mH_150]
   # Note: the custom DisCo network is so far only implemented for binary classification,
   # while the weaver framework inherently assumes multi-classification.
   # Hence the list above must have exactly two elements,
   # but only the first element will be considered the binary labels
   # (with 1 for signal and 0 for background);
   # the second element is needed for syntax but ignored in the custom training loop.

observers:
  # Make sure the decorrelated variable is used as observer,
  # to make post-training conclusions.
  - dHH_H1_regmass
  - dHH_H2_regmass

weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   #use_precomputed_weights: false
   #reweight_basewgt: np.abs(genWeight*xsecWeight)
   #reweight_basewgt: np.ones(len(genWeight))
   #reweight_method: flat
   #reweight_threshold: 0
   #reweight_vars:
   #   hh_average_mass: [75., 125., 175.]
   #reweight_classes:
   #   [isHHto4b_mH_100, isHHto4b_mH_150]
   #class_weights: [1, 1]
   #reweight_hists:
